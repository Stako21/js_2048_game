{"version":3,"sources":["scripts/main.js"],"names":["touchStartX","touchStartY","touchEndX","touchEndY","score","boardRows","boardColumn","board","slideDirection","rows","document","getElementsByTagName","start","querySelector","messageLose","messageWin","messageStart","keyInit","startGame","oldBoard","JSON","stringify","slide","setNumbers","addScore","win","classList","remove","canMove","getDirectionFromKey","key","handleSwipe","deltaX","deltaY","absDeltaX","Math","abs","absDeltaY","max","textContent","findEmpty","finds","some","element","getRandomNumber","randomNumber","floor","random","found","r","c","cellsAndNumbers","length","row","cells","updateTyle","cell","number","className","add","moveDerection","column","push","result","sameCells","unshift","i","reverse","filter","n","map","num","arr","res","direction","currentCell","neighborCell","undefined","rov","addEventListener","keyEvent","startEvent","touches","clientX","clientY","endEvent","changedTouches"],"mappings":"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","file":"main.5a44344a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet score = 0;\nconst boardRows = 4;\nconst boardColumn = 4;\nconst board = [];\n\nlet touchStartX, touchStartY, touchEndX, touchEndY;\nlet slideDirection = '';\n\nconst rows = document.getElementsByTagName('tr');\nconst start = document.querySelector('.start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nlet keyInit = false;\n\nfunction startGame() {\n  const oldBoard = JSON.stringify(board);\n\n  switch (slideDirection) {\n    case 'up':\n      slide('up');\n\n      if (JSON.stringify(board) !== oldBoard) {\n        setNumbers();\n      }\n      break;\n\n    case 'down':\n      slide('down');\n\n      if (JSON.stringify(board) !== oldBoard) {\n        setNumbers();\n      }\n      break;\n\n    case 'left':\n      slide('left');\n\n      if (JSON.stringify(board) !== oldBoard) {\n        setNumbers();\n      }\n      break;\n\n    case 'right':\n      slide('right');\n\n      if (JSON.stringify(board) !== oldBoard) {\n        setNumbers();\n      }\n      break;\n  }\n\n  addScore();\n  keyInit = true;\n\n  if (win()) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (!canMove('up')\n    && !canMove('down')\n    && !canMove('right')\n    && !canMove('left')) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nstart.addEventListener('click', () => {\n  board.length = 0;\n\n  for (let r = 0; r < boardRows; r++) {\n    const arr = [];\n\n    for (let c = 0; c < boardColumn; c++) {\n      arr.push(0);\n    }\n    board.push(arr);\n  };\n\n  if (!keyInit) {\n    document.addEventListener('keydown', (keyEvent) => {\n      slideDirection = getDirectionFromKey(keyEvent.key);\n      startGame();\n    });\n  }\n\n  setNumbers();\n  setNumbers();\n  score = 0;\n\n  start.textContent = 'Restart';\n  start.classList.add('restart');\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n});\n\ndocument.addEventListener('touchstart', (startEvent) => {\n  touchStartX = startEvent.touches[0].clientX;\n  touchStartY = startEvent.touches[0].clientY;\n});\n\ndocument.addEventListener('touchend', (endEvent) => {\n  touchEndX = endEvent.changedTouches[0].clientX;\n  touchEndY = endEvent.changedTouches[0].clientY;\n\n  handleSwipe();\n});\n\nfunction getDirectionFromKey(key) {\n  if (key === 'ArrowUp') {\n    return 'up';\n  } else if (key === 'ArrowDown') {\n    return 'down';\n  } else if (key === 'ArrowLeft') {\n    return 'left';\n  } else if (key === 'ArrowRight') {\n    return 'right';\n  }\n\n  return '';\n}\n\nfunction handleSwipe() {\n  const deltaX = touchEndX - touchStartX;\n  const deltaY = touchEndY - touchStartY;\n  const absDeltaX = Math.abs(deltaX);\n  const absDeltaY = Math.abs(deltaY);\n\n  if (Math.max(absDeltaX, absDeltaY) < 100) {\n    return;\n  }\n\n  if (absDeltaX > absDeltaY) {\n    slideDirection = deltaX > 0 ? 'right' : 'left';\n  } else {\n    slideDirection = deltaY > 0 ? 'down' : 'up';\n  }\n\n  startGame();\n}\n\nfunction addScore() {\n  const scoreOnPage = document.querySelector('.game-score');\n\n  scoreOnPage.textContent = score;\n}\n\nfunction findEmpty() {\n  for (const line of board) {\n    const finds = line.some((element) => element === 0);\n\n    if (finds) {\n      return true;\n    }\n  };\n\n  return false;\n};\n\nfunction getRandomNumber() {\n  const randomNumber = Math.floor(Math.random() * 100);\n\n  if (randomNumber < 10) {\n    return 4;\n  } else {\n    return 2;\n  }\n};\n\nfunction setNumbers() {\n  if (!findEmpty()) {\n    return;\n  };\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * boardRows);\n    const c = Math.floor(Math.random() * boardColumn);\n\n    if (board[r][c] === 0) {\n      board[r][c] = getRandomNumber();\n      cellsAndNumbers();\n      found = true;\n    }\n  }\n};\n\nfunction cellsAndNumbers() {\n  for (let r = 0; r < board.length; r++) {\n    const row = rows[r];\n    const cells = row.getElementsByTagName('td');\n\n    for (let c = 0; c < cells.length; c++) {\n      const cell = cells[c];\n      const number = board[r][c];\n\n      updateTyle(cell, number);\n    };\n  };\n};\n\nfunction updateTyle(cell, number) {\n  if (number) {\n    cell.textContent = '';\n    cell.textContent = `${number}`;\n    cell.className = 'field-cell';\n    cell.classList.add(`field-cell--${number}`);\n  } else {\n    cell.textContent = '';\n    cell.className = 'field-cell';\n  }\n};\n\nfunction slide(moveDerection) {\n  for (let r = 0; r < boardRows; r++) {\n    const column = [];\n\n    for (let c = 0; c < boardColumn; c++) {\n      let number = 0;\n\n      if (moveDerection === 'right' || moveDerection === 'left') {\n        number = board[r][c];\n      } else {\n        number = board[c][r];\n      }\n      column.push(number);\n    }\n\n    const result = sameCells(column, moveDerection);\n\n    while (result.length < column.length) {\n      if (moveDerection === 'right' || moveDerection === 'down') {\n        result.unshift(0);\n      } else {\n        result.push(0);\n      }\n    };\n\n    for (let i = 0; i < boardColumn; i++) {\n      if (moveDerection === 'right' || moveDerection === 'left') {\n        board[r][i] = result[i];\n      } else {\n        board[i][r] = result[i];\n      }\n    }\n  };\n\n  cellsAndNumbers();\n};\n\nfunction sameCells(column, moveDerection) {\n  if (moveDerection === 'right' || moveDerection === 'down') {\n    return column\n      .reverse()\n      .filter(n => n > 0)\n      .map((num, i, arr) => {\n        if (num === arr[i + 1]) {\n          arr[i + 1] = 0;\n\n          const res = num * 2;\n\n          score += res;\n\n          return res;\n        } else {\n          return num;\n        }\n      })\n      .reverse()\n      .filter(n => n > 0);\n  } else {\n    return column\n      .filter(n => n > 0)\n      .map((num, i, arr) => {\n        if (num === arr[i + 1]) {\n          arr[i + 1] = 0;\n\n          const res = num * 2;\n\n          score += res;\n\n          return res;\n        } else {\n          return num;\n        }\n      })\n      .filter(n => n > 0);\n  }\n};\n\nfunction canMove(direction) {\n  for (let r = 0; r < boardRows; r++) {\n    for (let c = 0; c < boardColumn; c++) {\n      const currentCell = board[r][c];\n      let neighborCell;\n\n      if (direction === 'up') {\n        neighborCell = r > 0 ? board[r - 1][c] : undefined;\n      } else if (direction === 'right') {\n        neighborCell = c < boardColumn - 1 ? board[r][c + 1] : undefined;\n      } else if (direction === 'down') {\n        neighborCell = r < boardRows - 1 ? board[r + 1][c] : undefined;\n      } else if (direction === 'left') {\n        neighborCell = c > 0 ? board[r][c - 1] : undefined;\n      }\n\n      if (currentCell !== 0\n        && (neighborCell === 0 || currentCell === neighborCell)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction win() {\n  if (board.some(rov => rov.some(cell => cell === 2048))) {\n    return true;\n  }\n\n  return false;\n}\n"]}